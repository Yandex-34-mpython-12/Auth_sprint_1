services:
  admin:
    build: admin_service/app
    env_file:
      - admin_service/app/example/.env
    ports:
      - 8002:8000

  films:
    build: film_service
    env_file: film_service/.env
    container_name: films
#    expose:
#      - ${FILMS_PORT}
    ports:
      - 8000:8000
    depends_on:
      - etl
      - elasticsearch
      - redis
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/api/health/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    build: auth_service
    env_file: auth_service/.env
    container_name: auth
#    expose:
#      - ${AUTH_PORT}
    ports:
      - 8001:8001
    depends_on:
      - redis
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8001/api/v1/health/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2.4
    container_name: redis
    env_file: .env
    volumes:
      - redis-data:/data
#    expose:
#      - ${REDIS_PORT}
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - postgres

  postgres:
    image: postgres:16
    container_name: postgres
    env_file: .env
#    expose:
#      - ${POSTGRES_PORT}
    ports:
      - 5432:5432
    volumes:
      - ./db/db_dump_260624.sql:/docker-entrypoint-initdb.d/db_dump_260624.sql
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    build:
      context: es
    env_file: .env
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
#    expose:
#      - ${ELASTICSEARCH_PORT}
    ports:
      - 9200:9200
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5

  etl:
    build:
      context: etl
    env_file: etl/.env
    volumes:
      - ./etl/es_state.json:/usr/src/app/es_state.json
    depends_on:
      - postgres
      - elasticsearch
    restart: always

#  nginx: TODO:!
#    image: nginx:latest
#    volumes:
#      - ./etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./etc/nginx/conf.d:/etc/nginx/conf.d:ro
#    depends_on:
#      - fastapi
#    ports:
#      - "80:80"
#    environment:
#      NGINX_SET_REAL_IPS_FROM: |-
#        [${NGINX_SET_REAL_IPS_FROM}]

volumes:
  es_data:
  redis-data:
  postgres-data:
